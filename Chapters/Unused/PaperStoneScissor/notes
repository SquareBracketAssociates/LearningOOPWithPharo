>Hello every body, i have a small question, hope it won't bother you. How 
>are used the Floats, for real numbers, by Smalltalk. 
>    I explain myself, when I do this in a workspace: 
>    9.97 - ( 4.56 + 5.41 ) 
>    the answer is :  1.77635684e-15  instead of Zero. 
>    And this 
>    | a | 
>    a := 3.52. 
>   ( a printFraction: 20 ) inspect. 
>    gives as result 3.52000000000000001776. 
>    Why are the Floats like this ? Is ther a solution ? In all my books 
>they never talk about this . 
>    Thank you for every thing, if some one can rescue me :) 

Well, there is no really short answer as to why floats are that way, but 
one basic reason is that there are many decimal numbers with no direct 
reperesentation as binary floats. (Binary representation is used in 
virtually all float hardware.) 
Thus, 9.97, 4.56, and 5.41 are not exactly represented. Here are your 
first three numbers displayed using some code I wrote. The full value is 
shown in hex. (This was run on V/Mac which is not an IEEE float platform 
so the number of digits will be different than on your IEEE hardware.) 
   9.97 printHex '1.3F0A3D70A3D70A3Ce3' 
   4.56 printHex '1.23D70A3D70A3D70Ae2' 
   5.41 printHex '1.5A3D70A3D70A3D72e2' 
Note that none of the numbers converts exactly. But look at 1.25, whic 
does: 
   1.25 printHex '1.4000000000000000e0' 
So, the expression is working with numbers that are not quite the same as 
the ones you thought you had, and the result is off just a bit. Note that 
you are getting this answer: 
   0.00000000000000177635684 
It is 14 zeros followed by a 1, which is about the full precision of an 
IEEE double precision floating point number. The rest of the value is 
just garbage created when the value was converted back to decimal. It 
looks ugly but does not hurt anything. 
Your second example does not convert exactly either: 
   3.52 printHex '1.C28F5C28F5C28F5Ce1' 
and it prints almost exactly to the full precision. You should have about 
15 digits of precision and your answer shows a few more zero digits that 
I would expect. 
Floats are designed for scientific and engineering computations, and NOT 
exact monetary calculations. Most Smalltalk systems have a FixedPoint or 
Decimal number class these days which are designed for monetary 
computations and which will give exact answers. 
Dave 


((33 * 1.8) + 32) asScaledDecimal = 91.4 asScaledDecimal

10.2s2