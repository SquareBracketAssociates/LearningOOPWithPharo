!! About this book 
@ch:about

!!! A word of presentation

I started to write this book back in 1998 when I wrote around 900 pages for the pre sequel to  "Learning Programming with Robots". Apparently I needed to write to understand what I wanted to explain and how. From this I extracted ''Learning Programming with Robots''. For me, ''Learning Programming with Robots'' was a book to teach simple concepts such as variables, loops, procedures and to help people to teach kids how to program. But in fact, I got really frustrated because to be understable by everyone I had to remove what I like: object-oriented programming and good object-oriented programming. 
At that time, I met Harald Wertz (which gave me nice ideas and pointers such as LSystems) and he asked why I focused on procedural thinking and that I should better teach object-priented programming.  And he was right. This remark was like a bee in my bonet for more than 10 years. In fact it was my original objective but I was exhausted after my first attempt.

Now nearly ten years after, I'm ready to write a book to start with object-oriented programming. I hope that you will enjoy it  as much as I did - even if writing a book for me is a really long and daunting task. 


!!! Structure of the book

While writing this book, I faced a challenge to find the correct level of difficulties. To solve this problem I structured the book into basic elements and projects (more advanced topics).
In addition some chapters are key and conceptual while others are more little tutorials that act more as explained step by step examples. Some of such chapters can be skipped while the conceptual one should not. 

 I also propose different levels of reading via different paths but often even ''simple'' chapters contain design remarks.

+Reading maps.>file://figures/Map.pdf|width=70|label=fgmap+

!!!! Fast track
The following chapers contain more conceptual information:

In the volume 1
- Glimpse at the Syntax
- Tests, tests and tests
- Objects and Classes
- Revisiting Objects and Classes
- Domain Specific Language
- Inheritance and Expressions
- Snakes and Ladders

In the volume 2
- Sending Message, 
- Scissors
- Visitors
- Aliens and sheeps






!!! What are the concepts you will learn
I would like to present the concepts that I want to teach you and that hopefully you should acquire. What is key to understand is that I will focus on the ''key'' conceptual elements. It is easy for me because I will not explain OOP/D in general but within the context of Pharo and Pharo is the essence of Object-Oriented programming since it object model is minimal 
but it covers the key and essential aspect of OOP. For example I will not present method modifiers, types, overloading (which is a bad concept).

I will focus on object-oriented programming concepts and object-oriented design 
- Objects / Classes 
- Messages / Methods
- self and its semantics
- Inheritance
- super and its semantics

And  Object-oriented design
- Class responsibility collaboration
- Delegation
- Message sends are choice (what would be the equivalent to not)
- Message sends are plans for reuse
- Double Dispatch
- The "Don't ask, tell" Principle
- Tests are your life ensurance
- Polymorphism
- Composite Pattern
- Visitor Pattern
- Hook template Design Pattern
- Strategy Design Pattern

!!!! Syntax, Blocks and Iterators
Since we need a language to express our programs, we will teach you the syntax of Pharo. In particular we will use some simple chapters to get you started. 

Now in a nutshell you should know that the Pharo syntax
- fits in one postcard; 
- is based on objects, messages and closure;
Closures are not a late addition to the language but a central cornestone. They enable this messages all over syntax as well as really powerful iterators.

!!! Typographic conventions

Pharo expressions or code snippets are always represented either in the text as =='Hello'== and =='Hello' reversed'== or in specific paragraph as
follows:
[[[
	
'Hello'
	 	
]]]

In addition when we want to show the result of an expression execution we use the message ==>>>== on a different line to stress the result itself.
[[[
	
'Hello' reversed
>>> 'olleH'

]]]

The important mini sections as the one below summarise an important concept or point
@@note Such notes stress an important conceptual point. They may repeat some sentences.

!!! Thanks

I would like to thanks Morgane Pigny, Quentin Ducasse, Sven van Caekenberghe, Hayatou Oumarou, Kateryna Aloshkina, Ricardo Pacheco Rold√°n for their great feedback.
Alexandre Bergel for his examples on messages. Olivier Auverlot for his feedback and Tinychat. 
Guillermo Polito for the idea of this cool example of files and directories. 



!!! New todo
- read LAN Finish tjj LAN and may be reunit it. 
- Implement game collector app
- reread and implement Game of life
- implement sokoban 
- Read tinychat
- Implement Game of Life
- Sending messages

Volume two 
- Visitor
- Interpreter

!!!!Alain
Lire 
- Beacons
- Ants
- Parser?
- Implementaiton turtle

	
!!!! other random stuffs	
Developing a simple counter should be read and adpat
-	shorten test
- 	no class method
-	Move solution of wallet
	
Chapter 5 move later and rename	
	More about the syntax
	summary 
	what is missing
	
More exercises
- *https://github.com/cdlm/kata-uno*

